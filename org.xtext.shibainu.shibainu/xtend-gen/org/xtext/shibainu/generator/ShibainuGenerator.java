/**
 * generated by Xtext 2.38.0
 */
package org.xtext.shibainu.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.shibainu.shibainu.Conditional;
import org.xtext.shibainu.shibainu.Model;
import org.xtext.shibainu.shibainu.Print;
import org.xtext.shibainu.shibainu.Statement;
import org.xtext.shibainu.shibainu.VariableDeclaration;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ShibainuGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model model = ((Model) _head);
    final String code = this.generateCode(model);
    fsa.generateFile("salida.java", code);
  }

  public String generateCode(final Model model) {
    final StringBuilder builder = new StringBuilder();
    EList<Statement> _statements = model.getStatements();
    for (final Statement stmt : _statements) {
      builder.append(this.generateStatement(stmt));
    }
    return builder.toString();
  }

  public CharSequence generateStatement(final Statement stmt) {
    String _switchResult = null;
    boolean _matched = false;
    if (stmt instanceof VariableDeclaration) {
      _matched=true;
      String _name = ((VariableDeclaration)stmt).getName();
      String _plus = ("int " + _name);
      String _plus_1 = (_plus + " = ");
      int _value = ((VariableDeclaration)stmt).getValue();
      String _plus_2 = (_plus_1 + Integer.valueOf(_value));
      _switchResult = (_plus_2 + ";\n");
    }
    if (!_matched) {
      if (stmt instanceof Print) {
        _matched=true;
        String _message = ((Print)stmt).getMessage();
        String _plus = ("System.out.println(" + _message);
        _switchResult = (_plus + ");\n");
      }
    }
    if (!_matched) {
      if (stmt instanceof Conditional) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("if (");
        String _left = ((Conditional)stmt).getComparison().getLeft();
        String _plus = (_builder.toString() + _left);
        String _plus_1 = (_plus + " ");
        String _literal = ((Conditional)stmt).getComparison().getOperator().getLiteral();
        String _plus_2 = (_plus_1 + _literal);
        String _plus_3 = (_plus_2 + " ");
        int _right = ((Conditional)stmt).getComparison().getRight();
        String _plus_4 = (_plus_3 + Integer.valueOf(_right));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append(") {");
        _builder_1.newLine();
        String _plus_5 = (_plus_4 + _builder_1);
        CharSequence _generateStatement = this.generateStatement(((Conditional)stmt).getStatement());
        String _plus_6 = (_plus_5 + _generateStatement);
        _switchResult = (_plus_6 + "}\n");
      }
    }
    return _switchResult;
  }
}
