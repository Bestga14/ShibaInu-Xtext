/*
 * generated by Xtext 2.38.0
 */
package org.xtext.shibainu.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.shibainu.shibainu.Model
import org.xtext.shibainu.shibainu.VariableDeclaration
import org.xtext.shibainu.shibainu.Statement
import org.xtext.shibainu.shibainu.Print
import org.xtext.shibainu.shibainu.Conditional

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ShibainuGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as Model
        val code = generateCode(model)
        fsa.generateFile("salida.java", code)
	}
	
	def generateCode(Model model) {
        val builder = new StringBuilder
        for (stmt : model.statements) {
            builder.append(generateStatement(stmt))
        }
        return builder.toString
    }
    
    def CharSequence generateStatement(Statement stmt) {
        switch (stmt) {
            VariableDeclaration: "int " + stmt.name + " = " + stmt.value + ";\n"
            Print: "System.out.println(" + stmt.message + ");\n"
            Conditional: 
                '''if (''' + stmt.comparison.left + " " + stmt.comparison.operator.literal + " " + stmt.comparison.right + ''') {
    ''' + generateStatement(stmt.statement) + "}\n"
        }
    }
}
